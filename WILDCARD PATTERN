def Match_Pattern(p,s,n1,n2,i,j,dp):
    if i>=n1 and j>=n2:
        return True
    if i>=n1 and j<n2:
        return False
    if i<n1 and j>=n2:
        for k in p[i:]:
            if k!='*':
                return False
        return True
    
    if dp[i][j]!=-1:
        return dp[i][j]
    
    if p[i]=='?' or p[i]==s[j]:
        dp[i][j] = Match_Pattern(p,s,n1,n2,i+1,j+1,dp)
        
    elif p[i]=='*':
        dp[i][j] = Match_Pattern(p,s,n1,n2,i+1,j,dp) or Match_Pattern(p,s,n1,n2,i,j+1,dp)
    
    else:
        dp[i][j]=False
    return dp[i][j]

def wildcardMatching(pattern, text):
    n1=len(pattern)
    n2=len(text)
    #dp=[[-1 for j in range(n2)] for i in range(n1)]
    #return Match_Pattern(pattern,text,n1,n2,0,0,dp)
    dp=[[0 for j in range(n2+1)] for i in range(n1+1)]
    dp[0][0]=True
    for i in range(1,n2+1):
        dp[0][i]=False
    for i in range(1,n1+1):
        flg=True
        for j in range(1,i+1):
            if pattern[j-1]!="*":
                flg=False
                break
        dp[i][0]=flg
    for i in range(1,n1+1):
        for j in range(1,n2+1):
            if pattern[i-1]==text[j-1] or pattern[i-1]=='?':
                dp[i][j]=dp[i-1][j-1]
            elif pattern[i-1]=='*':
                dp[i][j]=dp[i-1][j] or dp[i][j-1]
            else:
                dp[i][j]=False
    return dp[n1][n2]


t=int(input())

while t>0:

    pattern=input().strip()
    text=input().strip()

    print(wildcardMatching(pattern,text))
    
    t-=1
